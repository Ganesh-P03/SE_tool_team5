import dataclassesimport inspectfrom contextlib import contextmanagerfrom copy import deepcopyfrom typing import (    Any,    Callable,    Coroutine,    Dict,    ForwardRef,    List,    Mapping,    Optional,    Sequence,    Tuple,    Type,    Union,    cast,)import anyiofrom fastapi import paramsfrom fastapi.concurrency import (    AsyncExitStack,    asynccontextmanager,    contextmanager_in_threadpool,)from fastapi.dependencies.models import Dependant, SecurityRequirementfrom fastapi.logger import loggerfrom fastapi.security.base import SecurityBasefrom fastapi.security.oauth2 import OAuth2, SecurityScopesfrom fastapi.security.open_id_connect_url import OpenIdConnectfrom fastapi.utils import create_response_field, get_path_param_namesfrom pydantic import BaseModel, create_modelfrom pydantic.error_wrappers import ErrorWrapperfrom pydantic.errors import MissingErrorfrom pydantic.fields import (    SHAPE_FROZENSET,    SHAPE_LIST,    SHAPE_SEQUENCE,    SHAPE_SET,    SHAPE_SINGLETON,    SHAPE_TUPLE,    SHAPE_TUPLE_ELLIPSIS,    FieldInfo,    ModelField,    Required,    Undefined,)from pydantic.schema import get_annotation_from_field_infofrom pydantic.typing import evaluate_forwardreffrom pydantic.utils import lenient_issubclassfrom starlette.background import BackgroundTasksfrom starlette.concurrency import run_in_threadpoolfrom starlette.datastructures import FormData, Headers, QueryParams, UploadFilefrom starlette.requests import HTTPConnection, Requestfrom starlette.responses import Responsefrom starlette.websockets import WebSocketsequence_shapes = {    SHAPE_LIST,    SHAPE_SET,    SHAPE_FROZENSET,    SHAPE_TUPLE,    SHAPE_SEQUENCE,    SHAPE_TUPLE_ELLIPSIS,}sequence_types = (list, set, tuple)sequence_shape_to_type = {    SHAPE_LIST: list,    SHAPE_SET: set,    SHAPE_TUPLE: tuple,    SHAPE_SEQUENCE: list,    SHAPE_TUPLE_ELLIPSIS: list,}multipart_not_installed_error = (    'Form data requires "python-multipart" to be installed. \n'    'You can install "python-multipart" with: \n\n'    "pip install python-multipart\n")multipart_incorrect_install_error = (    'Form data requires "python-multipart" to be installed. '    'It seems you installed "multipart" instead. \n'    'You can remove "multipart" with: \n\n'    "pip uninstall multipart\n\n"    'And then install "python-multipart" with: \n\n'    "pip install python-multipart\n")def check_file_field(field: ModelField) -> None:    field_info = field.field_info    if isinstance(field_info, params.Form):        try:            